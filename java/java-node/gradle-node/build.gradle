plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'io.paketo'
version = '0.0.1-SNAPSHOT'

jar {
    enabled = false
}

repositories {
	mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
}

test {
	useJUnitPlatform()
}

tasks.named('resolveMainClassName') {
    dependsOn(copyFrontend)
}

tasks.named('compileTestJava') {
    dependsOn(copyFrontend)
}

tasks.register('installFrontend', Exec) {
    inputs.file(file("frontend/package.json"))
    inputs.file(file("frontend/package-lock.json"))
    outputs.dir(file("frontend/node_modules"))
    environment("NODE_ENV", "development")
    commandLine("env")
    commandLine("npm", "--prefix", "./frontend", "install", "./frontend")
}

tasks.register('buildFrontend', Exec) {
    dependsOn("installFrontend")
    inputs.dir(file("frontend"))
    outputs.dir(file("frontend/dist"))
    environment("NODE_ENV", "development")
    commandLine("npm", "--prefix", "./frontend", "run", "build")
}

tasks.register('copyFrontend', Sync) {
    dependsOn("buildFrontend")
    from(file("./frontend/dist"))
    into(file("$rootProject.layout.buildDirectory/resources/main/static"))
    doLast {
        println("copied built frontend to static resources")
    }
}

tasks.register('copyFrontendForIntelliJ', Sync) {
    dependsOn("buildFrontend")
    from(file("./frontend/dist"))
    into(file("./src/main/resources/static"))
    doLast {
        println("copied built frontend to static resources")
    }
}

tasks.register('cleanFrontend', Delete) {
    delete(file("./frontend/dist"))
    delete(file("./src/main/resources/static"))
}

bootJar {
    dependsOn(copyFrontend)
}

bootRun {
    dependsOn(copyFrontend)
}

clean {
    dependsOn(cleanFrontend)
}
